// New Definition of the Deltoideus wrapping cylinders
// Copy of the original code except the Radiuses formulas are changed


Main.HumanModel.BodyModel.Right.ShoulderArm.Mus = {
  
  
  // Deltoideus lateral for the right shoulder
  
  // gh_rotated_1 changed to My_gh_rotated_1 that follows ghProth
  // so that the wrapping_segment follows the new ghdriver
  MultiWrapSurfs My_DeltoidWrappingLateral (
  BASE_FRAME = WrappingSegment.RotNode,
  NUMBER_OF_CYLINDERS= 4,
  TYPE=WrappingSurfaceType,
  DEBUG=0
  ) = 
  {  
    
    // Original code, Scapula.gh not changed so that these dimensions remain the same between the cases. 
    // Since the ghProth position changes between cases depending on the tilt
//    RadiusX = 1.45* vnorm(..Seg.Scapula.GHReactionCenterNode.sRel - ..Seg.Scapula.gh.sRel);
//    Radius = vnorm(..Seg.Scapula.acj.sRel - ..Seg.Scapula.gh.sRel)*0.8613933;
//    RadiusHeight = 0.86* vnorm(..Seg.Scapula.GHReactionCenterNode.sRel - ..Seg.Scapula.acj.sRel);


//    test code
    RadiusX = 1.45* vnorm(..Seg.Scapula.GHReactionCenterNode.sRel - ..Seg.Scapula.gh.sRel);
    Radius = vnorm(..Seg.Scapula.acj.sRel - ..Seg.Scapula.gh.sRel)*0.8613933;
    
 //   height reduced from *0.86 to *0.7
    RadiusHeight = 0.7* vnorm(..Seg.Scapula.GHReactionCenterNode.sRel - ..Seg.Scapula.acj.sRel);

    
    
    
    
    Visibility = repmat(NumberOfCylinders, Off);
    
    
    
    
    WrapSurfLength = 2 * vnorm(..Seg.Humerus.I_deltoideus_lateral_part_1.sRel - ..Seg.Humerus.gh.sRel);
    Angles = ..Sign*{68, 85, 100, 120};  
    
    AnySeg WrappingSegment ={
      //^ Segment on which the wrapping cylinders are placed. 
      //^ The ssegment follows scapula kinematically, but is dynamically 
      //^ attached to both scapula and humerus to ensure that forces on 
      //^ the wrapping cylinders are distributed correctly between humerus 
      //^ scapula 
      
      Mass=0;
      Jii={0.0,0.0,0.0};    
      
      
      
      
      // Scapula.gh not changed to keep the original initial position defined
      r0= ...Seg.Scapula.gh.sRel*...Seg.Scapula.Axes0'+...Seg.Scapula.r0;  
      Axes0=...Seg.Scapula.Axes0
      //    #if _LEFT_RIGHT_ == "LEFT"
      //    * RotMat(pi,y) 
      //    #endif
      ;
      
      AnyRefNode RotNode = 
      {
        AnyVar PosteriorTilt = 7;
        //      AnyDrawRefFrame drwf ={ScaleXYZ=0.1*{1,1,1};RGB={0,1,1};};
        //      #if _LEFT_RIGHT_ == "LEFT"
        //      ARel = RotMat(-0.1,y)*RotMat(pi,x)*RotMat(PosteriorTilt*pi/180,x);
        //      #else
        ARel = RotMat(-0.1,y)*RotMat(PosteriorTilt*pi/180,x);
        //      #endif
      };  
    };   
    
    AnySphericalJoint WrapSegmentHumerusJnt ={
      AnyRefNode &ref1=...Seg.Humerus.gh ;
      AnySeg &ref2=.WrappingSegment; 
    };
    
    AnyFolder &ScapulaRef=..Seg.Scapula;
    
    // Changed the node that will be the HumerusWrapSegmentRot (from Scapula.gh to Scapula.ghProth )to respect the new GHjoint definition
    ScapulaRef={
      AnyRefNode My_gh_rotated1={
        // Original Code
                    sRel=.gh.sRel;
        
//        sRel=.ghProth.sRel;
        
        ARel={{....Sign*1,0,0},{0,1,0},{0,0,....Sign*1}};
      };
    };
    
    AnyFolder &HumerusRef =..Seg.Humerus;
    HumerusRef={
      AnyRefNode My_gh_rotated1={
        sRel=.gh.sRel;
        ARel={{1,0,0},{0,....Sign*1,0},{0,0,....Sign*1}};
      };
    };
    
    
    AnyKinMotion WrappingSegmentDriver={
      AnyKinMeasureLinComb LinComb = {
        AnyKinRotational HumerusScapulaRot={
          AnyRefNode &ref2=...ScapulaRef.My_gh_rotated1; 
          AnyRefNode &ref1=...HumerusRef.My_gh_rotated1;
          Type = RotVector;
        };
        AnyKinRotational HumerusWrapSegmentRot={
          AnyRefFrame &ref1=...ScapulaRef.My_gh_rotated1;
          AnyRefFrame &ref2=...WrappingSegment; 
          Type =RotVector;
        };
        OutDim = 3;
        Coef={
          {0.25,0,0,-1,0,0},
          { 0,0.05,0,0,-1,0}, //this one controls the rotation around the long axis of humerus
          {0,0,0.32,0,0,-1}
        };   
        
      }; // Measure  
    };
    
    AnyReacForce MomentsToScapula = 
    {
      AnyKinRotational rot ={
        AnyRefFrame &ref1=..WrappingSegment;
        AnyRefFrame &ref2=....Seg.Scapula;
        Type=RotVector;
      };  
    };
    
  };
  
  //Deltoideus posterior Wrapping
  // Scapula.gh changed to Scapula.ghProth
  // GHReactionsCenterNode changed to (..Seg.Scapula.GlenImplantPos.ARel * ..Seg.Scapula.GlenImplantPos.GlenImplantCenter.sRel')'
  // gh_rotated_1 changed to My_gh_rotated_1 that follows ghProth
  MultiWrapSurfs My_DeltoidWrappingPosterior (
  BASE_FRAME = WrappingSegment.RotNode,
  TYPE = 2,
  NUMBER_OF_CYLINDERS= 4,
  DEBUG=0
  ) = 
  {   
    
    // Original code, Scapula.gh not changed so that these dimensions remain the same between the cases. 
    // Since the ghProth position changes between cases depending on the tilt
    Radius = vnorm(..Seg.Scapula.aa.sRel - ..Seg.Scapula.gh.sRel)*0.71418;
    RadiusX = 1.68891* vnorm(..Seg.Scapula.GHReactionCenterNode.sRel - ..Seg.Scapula.gh.sRel);
    RadiusHeight = 0.8626287 * vnorm(..Seg.Scapula.GHReactionCenterNode.sRel - ..Seg.Scapula.acj.sRel);
    
    WrapSurfLength = 1.7 * vnorm(..Seg.Humerus.I_deltoideus_lateral_part_1.sRel - ..Seg.Humerus.gh.sRel);
    Angles = DesignVar(..Sign*{25, 30, 36, 52});
    
    
    
    Visibility = repmat(NumberOfCylinders, Off);
    
    AnySeg WrappingSegment ={
      //^ Segment on which the wrapping cylinders are placed. 
      //^ The ssegment follows scapula kinematically, but is dynamically 
      //^ attached to both scapula and humerus to ensure that forces on 
      //^ the wrapping cylinders are distributed correctly between humerus 
      //^ scapula 
      
      Mass=0;
      Jii={0.0,0.0,0.0};    
      
      
      
      // Scapula.gh not changed to keep the original initial position defined
      r0= ...Seg.Scapula.gh.sRel*...Seg.Scapula.Axes0'+...Seg.Scapula.r0;  
      Axes0=...Seg.Scapula.Axes0
      //    #if _LEFT_RIGHT_ == "LEFT"
      //    * RotMat(pi,y) 
      //    #endif
      ;
      
      AnyRefNode RotNode = 
      {
        AnyVar PosteriorTilt = 7;
        //AnyDrawRefFrame drwf ={ScaleXYZ=0.1*{1,1,1};RGB={0,1,1};};
        //      #if _LEFT_RIGHT_ == "LEFT"
        //      ARel = RotMat(-0.1,y)*RotMat(pi,x)*RotMat(PosteriorTilt*pi/180,x);
        //      #else
        ARel = RotMat(-0.1,y)*RotMat(PosteriorTilt*pi/180,x);
        //      #endif
      };  
    };   
    
    // Follows the newly created My_gh_rotated1 nodes that follow the Scapula.ghProth node instead of Scapula.gh
    AnySphericalJoint WrapSegmentHumerusJnt ={
      AnyRefNode &ref1=...Seg.Humerus.gh ;
      AnySeg &ref2=.WrappingSegment; 
    };
    
    AnyKinMotion WrappingSegmentDriver={
      AnyKinMeasureLinComb LinComb = {
        AnyKinRotational HumerusScapulaRot={
          AnyRefNode &ref2=.....Seg.Scapula.My_gh_rotated1; 
          AnyRefNode &ref1=.....Seg.Humerus.My_gh_rotated1;
          Type = RotVector;
        };
        AnyKinRotational HumerusWrapSegmentRot={
          AnyRefFrame &ref1=.....Seg.Scapula.My_gh_rotated1;
          AnyRefFrame &ref2=...WrappingSegment; 
          Type =RotVector;
        };
        OutDim = 3;
        Coef={
          {0.35,0,0,-1,0,0},
          { 0,0.05,0,0,-1,0}, //this one controls the rotaion around the long axis og humerus
          {0,0,0.45,0,0,-1}
        };     
      }; // Measure  
    };
    
    AnyReacForce MomentsToScapula = 
    {
      AnyKinRotational rot ={
        AnyRefFrame &ref1=..WrappingSegment;
        AnyRefFrame &ref2=....Seg.Scapula;
        Type=RotVector;
      };  
    };  
    
    
    
    
  };
  
  
};//Mus




// Lateral : Show or not the wrapping surfaces

AnySwitch LateralVisible = Off;
AnySwitch PosteriorVisible = Off;


Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.Opacity = 0.3;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_2.Surf.viewSurface.Opacity = 0.5;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_3.Surf.viewSurface.Opacity = 0.3;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_4.Surf.viewSurface.Opacity = 0.3;


Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.Visible = Off;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.RGB = {0,1,0};



Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.Visible = Off;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.RGB = {1,0,0};
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.Opacity = 0.3;




Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_2.Surf.viewSurface.Visible = LateralVisible;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_3.Surf.viewSurface.Visible = LateralVisible;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.WrappingSegment.RotNode.Wrapping_4.Surf.viewSurface.Visible = LateralVisible;

// Posterior : Show or not the wrapping surfaces
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.Opacity = 0.3;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_2.Surf.viewSurface.Opacity = 0.5;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_3.Surf.viewSurface.Opacity = 0.3;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_4.Surf.viewSurface.Opacity = 0.3;


Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_1.Surf.viewSurface.Visible = PosteriorVisible;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_2.Surf.viewSurface.Visible = PosteriorVisible;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_3.Surf.viewSurface.Visible = PosteriorVisible;
Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.WrappingSegment.RotNode.Wrapping_4.Surf.viewSurface.Visible = PosteriorVisible;






