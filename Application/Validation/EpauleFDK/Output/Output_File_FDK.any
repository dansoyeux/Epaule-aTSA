 
//    // Shortcuts
//    AnyFolder &Jnt = Main.HumanModel.BodyModel.Right.ShoulderArm.Jnt;
//    AnyFolder &Seg = Main.HumanModel.BodyModel.Right.ShoulderArm.Seg;
//    AnyFolder &Mus = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus;


AnyRefFrame &ForceRefFrame = Seg.Scapula.ghProth;


// Save in a *.txt file
AnyOutputFile FileOut = {
  FileName = .OutputFileName + ".txt";
  
  NumberFormat.Digits = 6;
  
  // Header
  Header = {
    TitleSectionOnOff = On;
    ConstSectionOnOff = On;
    VarSectionOnOff = On;
    ColumnNamesOnOff = On;  //swicth the column names on/off
    LinePrefix = "";
    ShortenNamesOnOff = Off;
    
  };     
  //-----------------SIMULATIONS PARAMETERS----------------------------
  // Input Values 
  AnyVar nStep = Main.Study.nStep;
  AnyVar tEnd = Main.Study.tEnd;

  // Movement type
  
  #if ArmMovement == Abduction
  AnyString Movement = "Abduction";
  #endif
  
  #if ArmMovement == Elevation
  AnyString Movement = "Elevation";
  
  #endif
  
  // Muscle recruitment type
  AnyEnumMuscleRecruitmentType MuscleRecruitment = Main.Study.InverseDynamics.Criterion.Type;
  AnyFloat AuxLinearTerm_Weight = Main.Study.InverseDynamics.Criterion.AuxLinearTerm.Weight;
  
  //Muscle wrapping
  #if NewDeltoidWrappingOn == 1
  AnyFloat LateralWrapping_RadiusX = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.RadiusX;
  AnyFloat LateralWrapping_Radius = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.Radius;
  AnyFloat LateralWrapping_RadiusHeight = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingLateral.RadiusHeight;
  
  AnyFloat PosteriorWrapping_RadiusX = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.RadiusX;
  AnyFloat PosteriorWrapping_Radius = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.Radius;
  AnyFloat PosteriorWrapping_RadiusHeight = Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.My_DeltoidWrappingPosterior.RadiusHeight;
  
  
  
  #if WrappingSurfaceType == 1
  AnyString WrappingSurfaceShape = "Cylinder";
  #endif
  #if WrappingSurfaceType == 2
  AnyString WrappingSurfaceShape = "Ellipsoid";
  #endif
  #endif
  
  
  
  // GHReaction activation
  #if GHReactionsOn == 1
  AnySwitch GHReactions = On;
  AnyVar EdgeMuscleStrength = Main.HumanModel.BodyModel.Right.ShoulderArm.Jnt.MyGHReactions.Strength;
  #else
  AnySwitch GHReactions = Off;
  #endif
  
  // CSA case 
  AnyString Case = CSA_Case;
  
  // FDK model values
  AnyFloat k0 = Main.InputVariables.FDK.k0;
  AnyFloat k1 = Main.InputVariables.FDK.k1;
  AnyFloat k2 = Main.InputVariables.FDK.k2;
  AnyFloat k3 = Main.InputVariables.FDK.k3;
  AnyFloat k4 = Main.InputVariables.FDK.k4;
  AnyFloat kz = Main.InputVariables.FDK.kz;
  
  //FDK Algorithm parameters
  AnyVar ForceTol = Main.Study.InverseDynamics.ForceDepKin.ForceTol;
  AnySwitch UseAdaptiveForceTolOnOff = Main.Study.InverseDynamics.ForceDepKin.UseAdaptiveForceTolOnOff;
  AnyVar MaxIteration = Main.Study.InverseDynamics.ForceDepKin.MaxIteration;
  AnyVar Perturbation = Main.Study.InverseDynamics.ForceDepKin.Perturbation;
  AnySwitch PerturbationSymmetricOnOff = Main.Study.InverseDynamics.ForceDepKin.PerturbationSymmetricOnOff;
  AnySwitch LocalSearchOnOff = Main.Study.InverseDynamics.ForceDepKin.LocalSearchOnOff;
  AnyVar MaxNewtonStep = Main.Study.InverseDynamics.ForceDepKin.MaxNewtonStep;
  
  // Implant initial positions
  AnyVar px = Main.InputVariables.JointPosition.px;
  AnyVar py = Main.InputVariables.JointPosition.py;
  AnyVar pz = Main.InputVariables.JointPosition.pz;
  AnyVar kd = Main.InputVariables.FDK.Contact.kd;
  
  // Implant used and local positions  
  AnyString HumerusName = Main.InputVariables.ImplantParameters.ImplantNames.HumerusName;
  AnyString GlenoidName = Main.InputVariables.ImplantParameters.ImplantNames.GlenoidName;
  
  AnyVar GleneImplantTiltAngle = Main.InputVariables.ImplantParameters.GlenPosition.GleneImplantTiltAngle;
  AnyString RotationAxis = Main.InputVariables.ImplantParameters.GlenPosition.RotationAxis;
  
  AnyMatrix GlenImplantRotation = Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Scapula.GlenImplantPos.ARel;
  AnyVec3 GlenImplantPosition = Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Scapula.GlenImplantPos.sRel;
  AnyVec3 GlenImplantCenter = Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Scapula.ghProth.sRel;
  
  AnyVec3 HumImplantPosition = Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Humerus.HumerusBoneGeometryNode.HumImplantPos.sRel;
  AnyMatrix HumImplantRotation = Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Humerus.HumerusBoneGeometryNode.HumImplantPos.ARel;
  
  // Acromion Offset    
  AnyVar AcromionOffset = Main.AcromionScaling.AcromionOffset;
  
  // Manequin initial values
  AnyVar GlenohumeralFlexion = Main.HumanModel.Mannequin.Posture.Right.GlenohumeralFlexion;
  AnyVar GlenohumeralAbduction = Main.HumanModel.Mannequin.Posture.Right.GlenohumeralAbduction;
  AnyVar GlenohumeralExternalRotation = Main.HumanModel.Mannequin.Posture.Right.GlenohumeralExternalRotation;
  
  
  
  
  //----------------SIMULATION MEASUREMENTS--------------
  
  // KINEMATIC
  AnyVar rotD= Main.Study.rotD; // Total abduction angle (deg)
  
  AnyVar vel = Main.HumanModel.BodyModel.Interface.Right.GlenohumeralAbduction.Vel[0]; // Angular velocity
  
  // Humerus ISB CS
  AnyFloat Hum_R_ISB = .Seg.Humerus.AnatomicalFrame.ISB_Coord.Axes; // Rotation Humerus ISB vs global
  AnyFloat Hum_P_ISB = .Seg.Humerus.AnatomicalFrame.ISB_Coord.r;    // Position Humerus ISB vs global
  
  // Scapula CS
  AnyFloat Scap_R = .Seg.Scapula.Axes; // Rotation Scapula vs global
  AnyFloat Scap_P = .Seg.Scapula.r;    // Position Scapula vs global
  
  // gh CS
  AnyFloat Gh_R = .Seg.Scapula.gh.Axes; // Rotation gh vs global
  AnyFloat Gh_P= .Seg.Scapula.gh.r;     // Position gh vs global
  
  // ghProth 
  AnyFloat GhProth_R = .Seg.Scapula.ghProth.Axes; // Rotation ghProth vs global
  AnyFloat GhProth_P = .Seg.Scapula.ghProth.r;    // Position ghProth vs global
  
  // Glenoid Implant
  AnyFloat RotG = .Seg.Scapula.GlenImplantPos.Axes; // Rotation glenoid implant vs global
  AnyFloat PosG = .Seg.Scapula.GlenImplantPos.r;    // Position  glenoid implant vs global
  
  // Humeral Head Implant
  AnyFloat Hum_R = .Seg.Humerus.HumerusBoneGeometryNode.HumImplantPos.Axes; // Rotation Humeral Head implant vs global
  AnyFloat Hum_P = .Seg.Humerus.HumerusBoneGeometryNode.HumImplantPos.r;    // Position Humeral Head implant vs global
  
  //    // GH-JRF if no contact between implants (use of push muscles)
  //    #if BallAndSocket==1
  //      AnyFloat ContactForce = .Jnt.GHReactions.ResultanForce.FTotalLocalGhProth;
  //    #endif
  
  // Contact values if contact between STL implant models
  #if BallAndSocket ==0 
  // coordinates in the humerus implant reference frame 
  AnyVec3 ContactForcelocalimplant=  (.Jnt.ProtheseContact.Fmaster) * Hum_R ;  
  // Converts the contact force between the implants from the global reference frame to the ISB humerus reference frame
  AnyVec3 ContactForce=  (.Jnt.ProtheseContact.Fmaster) * Hum_R_ISB ;
  
  AnyFloat SpringForce = .Jnt.SpringForce.F;
  AnyFloat Epsilon = .Jnt.SpringForce.Eps;
  
  AnyVec3 COPGlobal = .Jnt.ProtheseContact.COP; // Center of Pressure Humeral head on glenoid 
  AnyVec3 COPlocalGhProth =  (.Jnt.ProtheseContact.COP-GhProth_P) * GhProth_R ; // COP in local ref frame "ghProth"
  AnyVec3 COPlocalImplant =  (.Jnt.ProtheseContact.COP-PosG )* RotG ;  // COP in local ref frame "GlenImplantPos"
  
  AnyVec3 COPlocalHumerusImplant =  (.Jnt.ProtheseContact.COP-Hum_P )* Hum_R ;  // COP in local ref frame "HumImplantPos"
  
  AnyVar ContactArea= .Jnt.ProtheseContact.ContactArea; // Contact area 
  AnyVar MaxPenetration= .Jnt.ProtheseContact.MaxPenetration; // Maximum Penetration of the humeral head implant (metal=non deformable) in the glenoid component (plastic=defromable)
  #endif
  
  // Muscles activities and forces
  AnyVar MaxMuscleAct = Main.Study.MaxMuscleActivity;
  
  
  #if GHReactionsOn == 0
  Search = {"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_posterior_part_*.Ft","Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_posterior_part_*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_lateral_part_*.Ft", "Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_lateral_part_*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_anterior_part_*.Ft","Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_anterior_part_*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.supraspinatus*.Ft", "Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.supraspinatus*.CorrectedActivity"};
  #endif
  
  // Adds the general muscles and the position of the EdgeNodes if the GHReactions are activated
  #if GHReactionsOn == 1
  Search = {"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_posterior_part_*.Ft","Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_posterior_part_*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_lateral_part_*.Ft", "Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_lateral_part_*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_anterior_part_*.Ft","Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.deltoideus_anterior_part_*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.supraspinatus*.Ft", "Main.HumanModel.BodyModel.Right.ShoulderArm.Mus.supraspinatus*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Jnt.MyGHReactions.EdgeMuscle*.Ft","Main.HumanModel.BodyModel.Right.ShoulderArm.Jnt.MyGHReactions.EdgeMuscle*.CorrectedActivity"
    ,"Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Scapula.GlenImplantPos.GHReactionCenterNode.CavityEdgeNode*.r"
  };
  #endif
  
  // Force error at each step 
  AnyVar ForceTolError = Main.Study.ForceDepKinError.Val;  
  
  
};





